stages:
  - build

windows:
  tags:
  - Windows
  stage: build
  script:
   - $OPT_DIR = "C:/opt/x64"
   - $BOOST_DIR = "$OPT_DIR/boost_current"
   - $BOOST_INCLUDE_DIR = "$BOOST_DIR/include"
   - $BOOST_LIB_DIR = "$BOOST_DIR/lib"
   - $QT_MSVC_DIR = "C:/Qt/msvc"
   - $QTCMake_DIR = "$QT_MSVC_DIR/lib/cmake"
   - $BUILD_DIR = "build"
   - $QTDIR = "$QT_MSVC_DIR"
   - cd $BUILD_DIR
   - Remove-Item CM* -Recurse
   - cmake -G "Visual Studio 17 2022" -A x64 -T host=x64 -DCMAKE_PREFIX_PATH="$OPT_DIR" -DQTDIR="$QT_MSVC_DIR" -DCMAKE_INCLUDE_PATH="$BOOST_INCLUDE_DIR" -DCMAKE_LIBRARY_PATH="$BOOST_LIB_DIR" -DBA_PY_PACKAGE=ON -DCMAKE_C_COMPILER="cl.exe" -DCMAKE_CXX_COMPILER="cl.exe" -B. ..
   - cmake --build . --config Release
   - ctest -C Release --parallel 8 --output-on-failure
   - cpack -C Release -B ./winpackage
   - ctest -C Release --output-on-failure
 artifacts:
   paths:
   - build/OpenHKL*.exe
   expire_in: 10 days

mac10_15:
  tags:
  - macbuild3
  stage: build
  script:
    - mkdir build
    - cd build
    - export QTDIR=/usr/local/opt/qt5
    - cmake .. -D CMAKE_PREFIX_PATH=$QTDIR -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
    - make -j3
    - ctest -j3 --output-on-failure
    # - cpack -V
    - bash ../setup_scripts/mk_macos_pkg.sh ../ ./
  artifacts:
    paths:
    - build/OpenHKL-*.dmg
    - build/macospack/*.zip
    expire_in: 10 days

mac12_2:
  tags:
  - scgmac4
  stage: build
  script:
    - mkdir build
    - cd build
    - export PATH=/opt/homebrew/bin:$PATH
    - export QTDIR=/opt/homebrew/opt/qt5
    - export PYDIR=/opt/homebrew/opt/python@3.9/Frameworks/Python.framework/Versions/3.9
    - export PYLIB=$PYDIR/lib/libpython3.9.dylib
    - export PYINC=$PYDIR/include/python3.9
    - export TESTDATADIR=$HOME/testdata
    - cmake .. -D CMAKE_PREFIX_PATH=$QTDIR -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -D PYTHON_INCLUDE_DIR=$PYINC -D PYTHON_LIBRARY=$PYLIB -D OHKL_TESTDATA_DIR=$TESTDATADIR
    - make -j12
    - ctest -j12 --output-on-failure
    # - cpack -V
    - bash ../setup_scripts/mk_macos_pkg.sh ../ ./
  artifacts:
    paths:
    - build/OpenHKL-*.dmg
    - build/macospack/*.zip
    expire_in: 10 days

native_Debian_clang:
  tags:
  - Debian
  before_script: &debian_clang
    - export CC=clang; export CXX=clang++
    - cmake --version
    - clang --version
  stage: build
  script:
    - pwd && ls
    - mkdir build
    - cd build
    - |-
      if ($CI_PIPELINE_SOURCE -eq "scheduled"); then
        cmake .. -D CMAKE_CXX_COMPILER_LAUNCHER=ccache -D OHKL_FULL_WORKFLOW_TEST=ON
      else
        cmake .. -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
      fi
    - make -j6
    - |-
      if ($CI_PIPELINE_SOURCE -eq "scheduled"); then
        ctest -j6 --output-on-failure -L "nightly"
      else
        ctest -j6 --output-on-failure -E "nightly"
      fi

# ## Dockerized:
#
# debT_clang:
#   tags: &unix
#   - Linux
#   image: debian:testing
#   before_script: &debian_clang
#     - apt-get -y update
#     - apt-get -y upgrade
#     - apt-get -y install cmake swig git
#     - apt-get -y install qtbase5-dev libqcustomplot-dev
#     - apt-get -y install libblosc-dev libgsl-dev libfftw3-dev libeigen3-dev
#     - apt-get -y install libhdf5-dev libyaml-cpp-dev libtiff-dev
#     - apt-get -y install libqhull-dev
#     - apt-get -y install python3 python3-distutils libpython3-dev
#     - apt-get -y install python3-numpy python3-unittest2 python3-random2
#     - apt-get -y install clang
#     - apt-get -y install g++ # needed for libstdc++
#     - export CC=clang; export CXX=clang++
#     - git clone https://jugit.fz-juelich.de/mlz/libQCR.git
#     - git clone https://jugit.fz-juelich.de/mlz/xsection.git
#     - cmake --version
#     - clang --version
#   stage: build
#   script: &scr
#     - pwd && ls
#     - cd libQCR && mkdir build && cd build
#     - cmake .. && make && ctest && make install
#     - cd ../.. && pwd && ls
#     - cd xsection && mkdir build && cd build
#     - cmake .. && make -j3 && ctest && make install
#     - cd ../.. && pwd && ls
#     - mkdir build
#     - cd build
#     - cmake ..
#     - make -j8
#     - ctest -j8 --output-on-failure
#
# debT_gcc:
#   tags: *unix
#   image: debian:testing
#   before_script: &debian_gcc
#     - apt-get -y update
#     - apt-get -y upgrade
#     - apt-get -y install cmake swig git
#     - apt-get -y install qtbase5-dev libqcustomplot-dev
#     - apt-get -y install libblosc-dev libgsl-dev libfftw3-dev libeigen3-dev
#     - apt-get -y install libhdf5-dev libyaml-cpp-dev libtiff-dev
#     - apt-get -y install libqhull-dev
#     - apt-get -y install python3 python3-distutils libpython3-dev
#     - apt-get -y install python3-numpy python3-unittest2 python3-random2
#     - apt-get -y install g++
#     - git clone https://jugit.fz-juelich.de/mlz/libQCR.git
#     - git clone https://jugit.fz-juelich.de/mlz/xsection.git
#     - cmake --version
#     - g++ --version
#   stage: build
#   script: *scr

# suse_clang:
#
#   NOTE [JWu21jun19]:
#   We suspend Suse support because of bug in libhdf5:
#     ldd on that lib shows an entry 'z' instead of the full path to the zlib.
#   Should we ever need to support Suse, then of course we could easily work around
#     this bug by explicitly calling FindZLIB, and adding ZLIB_LIBRARIES to the core link list.
#
#   tags: *unix
#   image: opensuse/tumbleweed
#   # rolling release with infinite life time
#   before_script:
#     - zypper -n patch || echo "do it again"
#     - zypper -n patch
#     - zypper -n ref
#     - zypper -n up
#     - zypper -n dup
#     - zypper -n in git cmake clang perl pkgconf libqt5-qtbase-devel blosc-devel gsl-devel fftw3-devel eigen3-devel hdf5-devel yaml-cpp-devel libtiff-devel-32bit python3 python3-numpy python3-unittest2 python3-random2 python3-distutils-extra python3-devel swig
#     - git clone https://jugit.fz-juelich.de/mlz/libQCR.git
#     - git clone https://jugit.fz-juelich.de/mlz/xsection.git
#   stage: build
#   script: *scr
