# colormaps.py
# author: Jonathan Fisher  j.fisher@fz-juelich.de
#
# Description:
#   Extract RGB color values from various matplotlib color maps,
#   and automatically generate a C++ source file for the ColorMap class
#   in nsxtool.
#

import numpy as np
from matplotlib import cm

class BlueWhite:
    def __init__(self):
        self.name = "BlueWhite"
    
    def __call__(self, x):
        r = 1.0 - x
        g = 1.0 - x
        b = 0*x + 1
        
        return [ np.array([rgb[0], rgb[1], rgb[2]]) for rgb in zip(r,g,b)]

xs = np.linspace(0, 1, num=256)
cmaps = [
    BlueWhite(),
    cm.Blues,
    cm.viridis,
    cm.inferno,
    cm.plasma,
    cm.magma,
    cm.afmhot,
    cm.cool,
    cm.copper,
    cm.gist_heat,
    cm.hot,
    cm.summer,
    cm.winter,
    cm.gist_earth,
    cm.ocean,
    cm.brg,
    cm.gnuplot,
    cm.rainbow,
    cm.jet,
    cm.hsv,
    cm.gist_rainbow,
    cm.nipy_spectral,
    cm.CMRmap    
]

print("// this file was automatically generated by colormaps.py")
print("")
print("#include <string>")
print("#include <vector>")
print("#include \"ColorMap.h\"")
print("")

for cmap in cmaps:
    rgbs = cmap(xs)

    print("static double g_{}_rgb[256*3] = {}".format(cmap.name, '{'))

    for rgb in rgbs:
        rgb = 255*rgb
        print("{}, {}, {},".format(rgb[0], rgb[1], rgb[2]))

    print("};")
    print("")
    
    
print("ColorMap ColorMap::getColorMap(const std::string& name)")
print('{')
      
for cmap in cmaps:
    print("    if (name == \"{}\") return ColorMap(g_{}_rgb);".format(cmap.name, cmap.name))
              
print("    return getColorMap(getColorMapNames().front());")
print("{};\n".format('}'))

print("std::vector<std::string> ColorMap::getColorMapNames()")
print('{')
print("    std::vector<std::string> names;")
      
for cmap in cmaps:
    print("    names.push_back(\"{}\");".format(cmap.name))
              
print("    return names;")
print("{};\n".format('}'))
